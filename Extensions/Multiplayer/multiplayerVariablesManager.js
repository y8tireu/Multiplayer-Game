var gdjs;(function(n){const g=new n.Logger("Multiplayer"),u=new n.Logger("Multiplayer - Debug");n.makeMultiplayerVariablesManager=()=>{const o={},p=function({variableNetworkId:r,previousVariableOwner:e,newVariableOwner:a}){if(o[r]){o[r].newVariableOwner=a;return}o[r]={variableName:r,previousVariableOwner:e,newVariableOwner:a}},m=function(r){const e=r.split("_");if(e.length<2)throw new Error("Trying to get the variable type from a network id that is not a valid variable network id.");return{type:e[0]==="game"?"global":"scene",name:e.slice(1).join("_"),containerId:e[0]}},y=function(r,e){const a=e.getVariables();if(a.hasVariable(r)){const i=e.networkId;if(!i){u.info("Variable is being synchronized but the scene has no networkId yet.");return}const l=a.getVariableNameInContainerByLoopingThroughAllVariables(r);if(!l){g.error("Variable is being synchronized but has no name.");return}return i+"_"+l}const s=e.getGame().getVariables();if(s.hasVariable(r)){const i=s.getVariableNameInContainerByLoopingThroughAllVariables(r);if(!i){g.error("Variable is being synchronized but has no name.");return}return"game_"+i}g.error("Trying to modify synchronization of a variable that is not a scene or global variable.")},h=function(r,e){return e.getPlayerOwnership()},b=function(r,e,a){if(u.info(`Setting ownership of variable to player ${a}.`),a<0){g.error("Invalid player number ("+a+") when setting ownership of a variable.");return}const t=e.getPlayerOwnership();if(t===null){g.error("Cannot change ownership of a variable that is not synchronized.");return}e.setPlayerOwnership(a);const s=n.multiplayer.getCurrentPlayerNumber();if(!n.multiplayer.isLobbyGameRunning()||a!==s)return;const i=y(e,r),l=r.networkId;if(!i||!l)return;const{type:c}=m(i);u.info(`Adding variable to be synchronized: ${i} (type: ${c}) from owner ${t} to ${a}.`),p({variableNetworkId:i,previousVariableOwner:t,newVariableOwner:a})};return{getVariableTypeAndNameFromNetworkId:m,getPlayerVariableOwnership:h,setPlayerVariableOwnership:b,takeVariableOwnership:function(r,e){const a=n.multiplayer.getCurrentPlayerNumber();b(r,e,a)},removeVariableOwnership:function(r,e){b(r,e,0)},disableVariableSynchronization:function(r,e){e.disableSynchronization()},handleChangeVariableOwnerMessagesToSend:function(){if(!n.multiplayer.isLobbyGameRunning()||!n.multiplayer.isReadyToSendOrReceiveGameUpdateMessages())return;const r=n.multiplayer.getCurrentPlayerNumber();for(const e in o){const a=o[e],{messageName:t,messageData:s}=n.multiplayerMessageManager.createChangeVariableOwnerMessage({variableNetworkId:e,variableOwner:a.previousVariableOwner,newVariableOwner:a.newVariableOwner});if(a.newVariableOwner===r){const l=n.multiplayerPeerJsHelper.getAllPeers(),c=n.multiplayerMessageManager.createVariableOwnerChangedMessageNameFromChangeVariableOwnerMessage(t);n.multiplayerMessageManager.addExpectedMessageAcknowledgement({originalMessageName:t,originalData:s,expectedMessageName:c,otherPeerIds:l,shouldCancelMessageIfTimesOut:r!==1})}u.info("Sending change owner message",t);const i=n.multiplayerPeerJsHelper.getAllPeers();n.multiplayerMessageManager.sendDataTo(i,t,s),delete o[e]}}}},n.multiplayerVariablesManager=n.makeMultiplayerVariablesManager()})(gdjs||(gdjs={}));
//# sourceMappingURL=multiplayerVariablesManager.js.map
