var gdjs;(function(t){const r=new t.Logger("Multiplayer"),j=window.performance&&typeof window.performance.now=="function"?window.performance.now.bind(window.performance):Date.now,k=async({relativeUrl:H,method:R,body:P,dev:_})=>{const T=t.playerAuthentication.getUserId(),L=t.playerAuthentication.getUserToken();if(!T||!L)throw r.warn("Cannot fetch as a player if the player is not connected."),new Error("Cannot fetch as a player if the player is not connected.");const f=_?"https://api-dev.gdevelop.io":"https://api.gdevelop.io",A=new URL(`${f}${H}`);A.searchParams.set("playerId",T);const p=A.toString(),m={"Content-Type":"application/json",Authorization:`player-game-token ${L}`},E=await fetch(p,{method:R,headers:m,body:P});if(!E.ok)throw new Error(`Error while fetching as a player: ${E.status} ${E.statusText}`);const b=await E.text();if(b!=="OK")try{return JSON.parse(b)}catch(U){throw new Error(`Error while parsing the response: ${U}`)}};let re;(function(n){n.disableMultiplayerForTesting=!1,n._isReadyToSendOrReceiveGameUpdateMessages=!1;let P=null,_=!1,T=!1,L=!1;n._isLobbyGameRunning=!1;let A=!1,p=null,m=null,E=!1,b=null,U=null,$=!1,x=null,D=null,i=null,B=null,G=null;const ae=1e4,Q=3e4;let F=Q;const ie=1e3,ce=1e4,le=1e3,de=1e4;let S=null;const ge=12e3;n.DEFAULT_OBJECT_MAX_SYNC_RATE=30,n._objectMaxSyncRate=n.DEFAULT_OBJECT_MAX_SYNC_RATE;let w=!1;n.playerNumber=null,n.hostPeerId=null,t.registerRuntimeScenePreEventsCallback(e=>{w=e.getGame().isUsingGDevelopDevelopmentEnvironment(),!n.disableMultiplayerForTesting&&(t.multiplayerMessageManager.handleHeartbeatsToSend(),t.multiplayerMessageManager.handleJustDisconnectedPeers(e),t.multiplayerMessageManager.handleChangeInstanceOwnerMessagesReceived(e),t.multiplayerMessageManager.handleUpdateInstanceMessagesReceived(e),t.multiplayerMessageManager.handleCustomMessagesReceived(),t.multiplayerMessageManager.handleAcknowledgeMessagesReceived(),t.multiplayerMessageManager.resendClearOrCancelAcknowledgedMessages(e),t.multiplayerMessageManager.handleChangeVariableOwnerMessagesReceived(e),n._isLobbyGameRunning&&t.multiplayerMessageManager.handleSavedUpdateMessages(e),t.multiplayerMessageManager.handleUpdateGameMessagesReceived(e),t.multiplayerMessageManager.handleUpdateSceneMessagesReceived(e))}),t.registerRuntimeScenePostEventsCallback(e=>{n.disableMultiplayerForTesting||(he(e),ue(e),t.multiplayerMessageManager.handleHeartbeatsReceived(),t.multiplayerMessageManager.handleEndGameMessagesReceived(),t.multiplayerMessageManager.handleResumeGameMessagesReceived(e),t.multiplayerMessageManager.handleDestroyInstanceMessagesReceived(e),t.multiplayerVariablesManager.handleChangeVariableOwnerMessagesToSend(),t.multiplayerMessageManager.handleUpdateGameMessagesToSend(e),t.multiplayerMessageManager.handleUpdateSceneMessagesToSend(e))}),t.registerRuntimeScenePostEventsCallback(()=>{n.disableMultiplayerForTesting||(L=!1,A=!1)});const be=({runtimeGame:e,gameId:o})=>{const s="https://gd.games",a=new URL(`${s}/games/${o}/lobbies${p?`/${p}`:""}`);a.searchParams.set("gameVersion",e.getGameData().properties.version),e.getAdditionalOptions().nativeMobileApp&&a.searchParams.set("nativeMobileApp","true"),a.searchParams.set("isPreview",e.isPreview()?"true":"false"),w&&a.searchParams.set("dev","true"),m&&a.searchParams.set("connectionId",m),n.playerNumber&&a.searchParams.set("positionInLobby",n.playerNumber.toString());const g=t.playerAuthentication.getUserId();g&&a.searchParams.set("playerId",g);const d=t.playerAuthentication.getUserToken();return d&&a.searchParams.set("playerToken",d),a.searchParams.set("multiplayerVersion","2"),a.toString()};n.setObjectsSynchronizationRate=e=>{e<1||e>60?(r.warn(`Invalid rate ${e} for object synchronization. Defaulting to ${n.DEFAULT_OBJECT_MAX_SYNC_RATE}.`),n._objectMaxSyncRate=n.DEFAULT_OBJECT_MAX_SYNC_RATE):n._objectMaxSyncRate=e},n.getObjectsSynchronizationRate=()=>n._objectMaxSyncRate,n.hasLobbyGameJustStarted=()=>L,n.isLobbyGameRunning=()=>n._isLobbyGameRunning,n.isReadyToSendOrReceiveGameUpdateMessages=()=>n._isReadyToSendOrReceiveGameUpdateMessages,n.hasLobbyGameJustEnded=()=>A,n.getPlayersInLobbyCount=()=>t.multiplayerMessageManager.getNumberOfConnectedPlayers(),n.isPlayerConnected=e=>t.multiplayerMessageManager.isPlayerConnected(e),n.getCurrentPlayerNumber=()=>n.playerNumber||0,n.isCurrentPlayerHost=()=>!!n.hostPeerId&&n.hostPeerId===t.multiplayerPeerJsHelper.getCurrentId(),n.isMigratingHost=()=>!!$,n.endLobbyWhenHostLeaves=e=>{E=e},n.shouldEndLobbyWhenHostLeaves=()=>E,n.getPlayerUsername=e=>t.multiplayerMessageManager.getPlayerUsername(e),n.getCurrentPlayerUsername=()=>{const e=n.getCurrentPlayerNumber();return n.getPlayerUsername(e)};const he=e=>{const o=t.multiplayerMessageManager.getLatestPlayerWhoJustLeft();if(o){const s=n.getPlayerUsername(o);t.multiplayerComponents.displayPlayerLeftNotification(e,s),t.multiplayerMessageManager.removePlayerWhoJustLeft(),n.isCurrentPlayerHost()&&n.isReadyToSendOrReceiveGameUpdateMessages()&&O()}},ue=e=>{const o=t.multiplayerMessageManager.getLatestPlayerWhoJustJoined();if(o){const s=n.getPlayerUsername(o);t.multiplayerComponents.displayPlayerJoinedNotification(e,s),n.isCurrentPlayerHost()&&n.isReadyToSendOrReceiveGameUpdateMessages()&&O()}t.multiplayerMessageManager.removePlayerWhoJustJoined()},ne=(e,o,s=0)=>{const g=`${w?"https://api-dev.gdevelop.io":"https://api.gdevelop.io"}/game/public-game/${o}`;return fetch(g,{method:"HEAD"}).then(d=>d.status!==200?(r.warn(`Error while fetching the game: ${d.status} ${d.statusText}`),d.status===404||s>2?!1:ne(e,o,s+1)):!0,d=>(r.error("Error while fetching game:",d),!1))},fe=function(e,o){if(m){r.info("Already connected to a lobby.");return}i&&(r.warn("Already connected to a lobby. Closing the previous one."),i.close(),m=null,n.playerNumber=null,n.hostPeerId=null,p=null,i=null);const s=t.projectData.properties.projectUuid,a=t.playerAuthentication.getUserId(),g=t.playerAuthentication.getUserToken();if(!s){r.error("Cannot open lobbies if the project has no ID.");return}if(!a||!g){r.warn("Cannot open lobbies if the player is not connected.");return}const d=w?"wss://api-ws-dev.gdevelop.io/play":"wss://api-ws.gdevelop.io/play",c=new URL(d);c.searchParams.set("gameId",s),c.searchParams.set("lobbyId",o),c.searchParams.set("playerId",a),c.searchParams.set("connectionType","lobby"),c.searchParams.set("playerGameToken",g),i=new WebSocket(c.toString()),i.onopen=()=>{if(r.info("Connected to the lobby."),B=setInterval(()=>{i&&i.send(JSON.stringify({action:"heartbeat",connectionType:"lobby"}))},ae),i){i.send(JSON.stringify({action:"getConnectionId"}));const l=e.getGame().getPlatformInfo();i.send(JSON.stringify({action:"sessionInformation",connectionType:"lobby",isCordova:l.isCordova,devicePlatform:l.devicePlatform,navigatorPlatform:l.navigatorPlatform,hasTouch:l.hasTouch,supportedCompressionMethods:l.supportedCompressionMethods}))}},i.onmessage=l=>{if(l.data){const h=JSON.parse(l.data);switch(h.type){case"connectionId":{const u=h.data,v=u.connectionId,J=u.positionInLobby,ke=u.validIceServers||[],He=u.brokerServerConfig;if(!v||!J){r.error("No connectionId or position received"),t.multiplayerComponents.displayErrorNotification(e),i&&i.close();return}me({runtimeScene:e,connectionId:v,positionInLobby:J,lobbyId:o,playerId:a,playerToken:g,validIceServers:ke,brokerServerConfig:He});break}case"lobbyUpdated":{const v=h.data.positionInLobby;ye({runtimeScene:e,positionInLobby:v});break}case"gameCountdownStarted":{const v=h.data.compressionMethod||"none";we({runtimeScene:e,compressionMethod:v});break}case"gameStarted":{F=h.data.heartbeatInterval||Q,Me({runtimeScene:e});break}case"peerId":{const u=h.data;if(!u){r.error("No message received");return}const v=u.peerId,J=u.compressionMethod;if(!v||!J){r.error("Malformed message received");return}Ce({peerId:v,compressionMethod:J});break}}}},i.onclose=()=>{if(n._isLobbyGameRunning||r.info("Disconnected from the lobby."),m=null,i=null,B&&clearInterval(B),n._isLobbyGameRunning)return;const l=t.multiplayerComponents.getLobbiesIframe(e);!l||!l.contentWindow||l.contentWindow.postMessage({id:"lobbyLeft"},"*")}},me=function({runtimeScene:e,connectionId:o,positionInLobby:s,lobbyId:a,playerId:g,playerToken:d,validIceServers:c,brokerServerConfig:l}){if(c.length)for(const u of c)t.multiplayerPeerJsHelper.useCustomICECandidate(u.urls,u.username,u.credential);l?t.multiplayerPeerJsHelper.useCustomBrokerServer(l.hostname,l.port,l.path,l.key,l.secure):t.multiplayerPeerJsHelper.useDefaultBrokerServer(),m=o,n.playerNumber=s,p=a;const h=t.multiplayerComponents.getLobbiesIframe(e);if(!h||!h.contentWindow){r.error("The lobbies iframe is not opened, cannot send the join message.");return}h.contentWindow.postMessage({id:"lobbyJoined",lobbyId:a,playerId:g,playerToken:d,connectionId:m,positionInLobby:s},"https://gd.games")},z=function(){i&&i.close(),m=null,n.playerNumber=null,n.hostPeerId=null,p=null,i=null},ye=function({runtimeScene:e,positionInLobby:o}){n.playerNumber=o;const s=t.multiplayerComponents.getLobbiesIframe(e);!s||!s.contentWindow||s.contentWindow.postMessage({id:"lobbyUpdated",positionInLobby:o},"*")},we=function({runtimeScene:e,compressionMethod:o}){t.multiplayerPeerJsHelper.setCompressionMethod(o),n.getCurrentPlayerNumber()===1&&Ee();const s=t.multiplayerComponents.getLobbiesIframe(e);if(!s||!s.contentWindow){r.info("The lobbies iframe is not opened, not sending message.");return}s.contentWindow.postMessage({id:"gameCountdownStarted"},"*"),t.multiplayerComponents.hideLobbiesCloseButtonTemporarily(e)},O=async function(){const e=t.projectData.properties.projectUuid;if(!e||!p){r.error("Cannot keep the lobby playing without the game ID or lobby ID.");return}const o=`/play/game/${e}/public-lobby/${p}/action/heartbeat`,s=t.multiplayerMessageManager.getConnectedPlayers();try{await k({relativeUrl:o,method:"POST",body:JSON.stringify({players:s}),dev:w})}catch(a){r.error("Error while sending heartbeat, retrying:",a);try{await k({relativeUrl:o,method:"POST",body:JSON.stringify({players:s}),dev:w})}catch(g){r.error("Error while sending heartbeat a second time. Giving up:",g)}}},Me=function({runtimeScene:e}){const o=t.multiplayerPeerJsHelper.getAllPeers();if(!n.isCurrentPlayerHost()&&o.length===0){t.multiplayerComponents.displayConnectionErrorNotification(e),z(),n.removeLobbiesContainer(e),X(e);return}n.isCurrentPlayerHost()&&(G=setInterval(async()=>{await O()},F)),r.info("Lobby game has started."),t.multiplayerMessageManager.handleSavedUpdateMessages(e),n._isReadyToSendOrReceiveGameUpdateMessages=!0,L=!0,n._isLobbyGameRunning=!0,n.removeLobbiesContainer(e),i&&i.close(),X(e)};n.handleLobbyGameEnded=function(){r.info("Lobby game has ended."),A=!0,n._isLobbyGameRunning=!1,p=null,n.playerNumber=null,n.hostPeerId=null,n._isReadyToSendOrReceiveGameUpdateMessages=!1,G&&(clearInterval(G),G=null),t.multiplayerPeerJsHelper.disconnectFromAllPeers(),t.multiplayerMessageManager.clearAllMessagesTempData()};const Ce=function({peerId:e,compressionMethod:o}){t.multiplayerPeerJsHelper.setCompressionMethod(o);const s=t.multiplayerPeerJsHelper.getCurrentId();if(!s){r.error("No peerId found, the player does not seem connected to the broker server.");return}if(s===e){r.info("Received our own peerId, ignoring.");return}n.hostPeerId=e,t.multiplayerPeerJsHelper.connect(e)},Ie=function(){if(!i){r.error("No connection to send the start countdown message. Are you connected to a lobby?");return}i.send(JSON.stringify({action:"startGameCountdown",connectionType:"lobby"}))},ve=function(){if(!i){r.error("No connection to send the start countdown message. Are you connected to a lobby?");return}i.send(JSON.stringify({action:"startGame",connectionType:"lobby"})),n._isReadyToSendOrReceiveGameUpdateMessages=!0},Pe=function(){if(!i){r.error("No connection to send the start countdown message. Are you connected to a lobby?");return}i.send(JSON.stringify({action:"joinGame",connectionType:"lobby"}))};n.markConnectionAsConnected=function(){!i||i.send(JSON.stringify({action:"updateConnection",connectionType:"lobby",status:"connected",peerId:t.multiplayerPeerJsHelper.getCurrentId()}))};const I=function(e){b=null,U=null,x=null,S&&(clearTimeout(S),S=null),$=!1,n.hostPeerId?t.multiplayerComponents.showHostMigrationFinishedNotification(e):t.multiplayerComponents.showHostMigrationFailedNotification(e)};n.resumeGame=async function(e){n.isCurrentPlayerHost()&&(t.multiplayerMessageManager.sendResumeGameMessage(),await O(),G=setInterval(async()=>{await O()},F)),I(e)};const oe=async function({runtimeScene:e}){if(!b||!U)return;try{const s=`/play/game/${b.gameId}/public-lobby/${b.lobbyId}/lobby-change-host-request?peerId=${t.multiplayerPeerJsHelper.getCurrentId()}`;b=await k({relativeUrl:s,method:"GET",dev:w})}catch(s){r.error("Error while trying to retrieve the lobby change host request:",s),n.handleLobbyGameEnded(),I(e);return}if(!b)throw new Error("No lobby change host request received.");const o=b.newHostPeerId;if(!o){if(r.info("No new host picked yet."),j()-U>ce){r.error("Timeout while waiting for the lobby host change. Giving up."),n.handleLobbyGameEnded(),I(e);return}r.info("Retrying..."),setTimeout(()=>{oe({runtimeScene:e})},ie);return}try{const s=b.newLobbyId,a=b.newPlayers;if(!s||!a){r.error("Change host request is incomplete. Cannot change host."),n.handleLobbyGameEnded(),I(e);return}n.hostPeerId=o,x=j(),p=s,o===t.multiplayerPeerJsHelper.getCurrentId()?(r.info(`We are the new host. Switching to lobby ${s} and awaiting for ${a.length-1} player(s) to connect.`),await se({runtimeScene:e})):(r.info(`Connecting to new host and switching lobby to ${s}.`),t.multiplayerPeerJsHelper.connect(o),S=setTimeout(()=>{r.error("Timeout while waiting for the game to resume. Leaving the lobby."),n.handleLobbyGameEnded(),I(e)},ge))}catch(s){r.error("Error while trying to change host:",s),n.handleLobbyGameEnded(),I(e)}},se=async function({runtimeScene:e}){if(!b)return;const o=b.newPlayers;if(!o){r.error("No expected players in the lobby change host request."),n.handleLobbyGameEnded(),I(e);return}const s=o.map(c=>c.playerNumber);t.multiplayerMessageManager.getConnectedPlayers().map(c=>c.playerNumber).filter(c=>!s.includes(c)).map(c=>{r.info(`Player ${c} left during the host migration. Marking as disconnected.`),t.multiplayerMessageManager.markPlayerAsDisconnected({runtimeScene:e,playerNumber:c})});const d=s.filter(c=>c!==n.playerNumber&&!t.multiplayerMessageManager.hasReceivedHeartbeatFromPlayer(c));if(d.length===0){r.info("All expected players are connected. Resuming the game."),await n.resumeGame(e);return}if(x&&j()-x>de&&d.length>0){r.error(`Timeout while waiting for players ${d.join(", ")} to connect. Assume they disconnected.`),d.map(c=>{t.multiplayerMessageManager.markPlayerAsDisconnected({runtimeScene:e,playerNumber:c})}),await n.resumeGame(e);return}setTimeout(()=>{se({runtimeScene:e})},le)};n.handleHostDisconnected=async function({runtimeScene:e}){if(!n._isLobbyGameRunning)return;b&&(n.handleLobbyGameEnded(),I(e));const o=t.projectData.properties.projectUuid;if(!o||!p){r.error("Cannot ask for a host change without the game ID or lobby ID.");return}try{$=!0,t.multiplayerComponents.displayHostMigrationNotification(e);const s=`/play/game/${o}/public-lobby/${p}/lobby-change-host-request`,a=t.multiplayerMessageManager.getPlayersInfo(),g=Object.keys(a).map(l=>({playerNumber:parseInt(l,10),playerId:a[l].playerId,ping:a[l].ping})),d=JSON.stringify({playersInfo:g,peerId:t.multiplayerPeerJsHelper.getCurrentId()});b=await k({relativeUrl:s,method:"POST",body:d,dev:w}),U=j(),await oe({runtimeScene:e})}catch(s){r.error("Error while trying to change host:",s),n.handleLobbyGameEnded(),I(e)}},n.endLobbyGame=async function(){if(!n.isLobbyGameRunning())return;if(!n.isCurrentPlayerHost()){r.error("Only the host can end the game.");return}n._isLobbyGameRunning=!1,r.info("Ending the lobby game."),t.multiplayerMessageManager.sendEndGameMessage();const e=t.projectData.properties.projectUuid;if(!e||!p){r.error("Cannot end the lobby without the game ID or lobby ID.");return}const o=`/play/game/${e}/public-lobby/${p}/action/end`;try{await k({relativeUrl:o,method:"POST",body:JSON.stringify({}),dev:w})}catch(s){r.error("Error while ending the game:",s)}n.handleLobbyGameEnded()};const Ee=function(){if(!i){r.error("No connection to send the message. Are you connected to a lobby?");return}const e=t.multiplayerPeerJsHelper.getCurrentId();if(!e){r.error("No peerId found, the player doesn't seem connected to the broker server.");return}i.send(JSON.stringify({action:"sendPeerId",connectionType:"lobby",peerId:e})),n.hostPeerId=e},Re=function(e,o,{checkOrigin:s}){if(!(s&&!["https://gd.games","http://localhost:4000"].includes(o.origin))){if(!o.data.id)throw new Error("Malformed message");switch(o.data.id){case"lobbiesListenerReady":{Te(e);break}case"joinLobby":{if(!o.data.lobbyId)throw new Error("Malformed message.");fe(e,o.data.lobbyId);break}case"startGameCountdown":{Ie();break}case"startGame":{ve();break}case"leaveLobby":{z();break}case"joinGame":{Pe();break}}}},K=function(e,o){r.error(o),n.removeLobbiesContainer(e),X(e)},Te=e=>{const o=t.multiplayerComponents.getLobbiesIframe(e);if(!o||!o.contentWindow)return;const s=e.getGame().getPlatformInfo();o.contentWindow.postMessage({id:"sessionInformation",isCordova:s.isCordova,devicePlatform:s.devicePlatform,navigatorPlatform:s.navigatorPlatform,hasTouch:s.hasTouch},"*")},Le=(e,o)=>{const s=be({runtimeGame:e.getGame(),gameId:o});D=a=>{Re(e,a,{checkOrigin:!0})},window.addEventListener("message",D,!0),t.multiplayerComponents.displayIframeInsideLobbiesContainer(e,s)};n.openLobbiesWindow=async e=>{if(n.isLobbiesWindowOpen(e)||t.playerAuthentication.isAuthenticationWindowOpen())return;const o=t.projectData.properties.projectUuid;if(!o){K(e,"The game ID is missing, the lobbies window cannot be opened.");return}if(_||T)return;if(!e.getGame().getRenderer().getDomElementContainer()){K(e,"The div element covering the game couldn't be found, the lobbies window cannot be displayed.");return}const a=()=>{n.removeLobbiesContainer(e)},g=t.playerAuthentication.getUserId(),d=t.playerAuthentication.getUserToken();if(!g||!d){T=!0;const{status:h}=await t.playerAuthentication.openAuthenticationWindow(e).promise;T=!1,h==="logged"&&n.openLobbiesWindow(e);return}if(t.multiplayerComponents.displayLobbies(e,a),P===null){_=!0;try{P=await ne(e.getGame(),o)}catch(h){P=!1,r.error("Error while checking if the game is registered:",h),K(e,"Error while checking if the game is registered.");return}finally{_=!1}}const c=e.getGame().getRenderer().getElectron(),l=c?()=>c.shell.openExternal("https://wiki.gdevelop.io/gdevelop5/publishing/web"):()=>window.open("https://wiki.gdevelop.io/gdevelop5/publishing/web","_blank");t.multiplayerComponents.addTextsToLoadingContainer(e,P,l),P&&Le(e,o)},n.isLobbiesWindowOpen=function(e){return!!t.multiplayerComponents.getLobbiesRootContainer(e)},n.showLobbiesCloseButton=function(e,o){t.multiplayerComponents.changeLobbiesWindowCloseActionVisibility(e,o)},n.removeLobbiesContainer=function(e){Ne(),t.multiplayerComponents.removeLobbiesContainer(e)};const Ne=function(){D&&(window.removeEventListener("message",D,!0),D=null)},X=function(e){const o=e.getGame().getRenderer().getCanvas();o&&o.focus()};n.leaveGameLobby=async()=>{z(),n.handleLobbyGameEnded()}})(re=t.multiplayer||(t.multiplayer={}))})(gdjs||(gdjs={}));
//# sourceMappingURL=multiplayertools.js.map
