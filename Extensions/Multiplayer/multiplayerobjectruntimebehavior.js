var gdjs;(function(a){const d=new a.Logger("Multiplayer"),m=new a.Logger("Multiplayer - Debug"),f=window.performance&&typeof window.performance.now=="function"?window.performance.now.bind(window.performance):Date.now;class g extends a.RuntimeBehavior{constructor(t,n,e){super(t,n,e);this.playerNumber=0;this._lastObjectSyncTimestamp=0;this._lastBasicObjectSyncTimestamp=0;this._objectBasicInfoSyncRate=5;this._numberOfForcedBasicObjectUpdates=0;this._lastVariablesSyncTimestamp=0;this._variablesSyncRate=1;this._numberOfForcedVariablesUpdates=0;this._lastEffectsSyncTimestamp=0;this._effectsSyncRate=1;this._numberOfForcedEffectsUpdates=0;this._lastLogTimestamp=0;this._logSyncRate=1;this._clock=0;this._destroyInstanceTimeoutId=null;this._timeBeforeDestroyingObjectWithoutNetworkIdInMs=500;this._sendDataToPeersWithIncreasedClock=async(t,n)=>{this._clock++,n._clock=this._clock;const e=a.multiplayerPeerJsHelper.getAllPeers();await a.multiplayerMessageManager.sendDataTo(e,t,n)};this.playerNumber=n.playerNumber==="Host"?0:parseInt(n.playerNumber,10),this.actionOnPlayerDisconnect=n.actionOnPlayerDisconnect,this._destroyInstanceTimeoutId=setTimeout(()=>{const r=this.owner.getRuntimeScene().networkId;!e.networkId&&a.multiplayer.isLobbyGameRunning()&&r&&(m.info(`Lobby game is running on a synced scene and object ${e.getName()} has not been assigned a networkId after a short delay, destroying it.`),e.deleteFromScene(t))},this._timeBeforeDestroyingObjectWithoutNetworkIdInMs)}_isOwnerAsPlayerOrHost(){const t=a.multiplayer.getCurrentPlayerNumber(),n=a.multiplayer.isCurrentPlayerHost();return t===this.playerNumber||n&&this.playerNumber===0}_hasObjectBeenSyncedWithinMaxRate(){const t=a.multiplayer.getObjectsSynchronizationRate();return f()-this._lastObjectSyncTimestamp<1e3/t}_hasObjectBasicInfoBeenSyncedRecently(){return f()-this._lastBasicObjectSyncTimestamp<1e3/this._objectBasicInfoSyncRate}_haveVariablesBeenSyncedRecently(){return f()-this._lastVariablesSyncTimestamp<1e3/this._variablesSyncRate}_haveEffectsBeenSyncedRecently(){return f()-this._lastEffectsSyncTimestamp<1e3/this._effectsSyncRate}_getOrCreateInstanceNetworkId(){if(!this.owner.networkId){const t=a.makeUuid().substring(0,8);this.owner.networkId=t}return this.owner.networkId}_isBasicObjectNetworkSyncDataDifferentFromLastSync(t){return this._lastSentBasicObjectSyncData?JSON.stringify(t)!==JSON.stringify(this._lastSentBasicObjectSyncData):!0}_areVariablesDifferentFromLastSync(t){return this._lastSentVariableSyncData?JSON.stringify(t)!==JSON.stringify(this._lastSentVariableSyncData):!0}_areEffectsDifferentFromLastSync(t){if(!this._lastSentEffectSyncData)return!0;for(const n in t){if(!t.hasOwnProperty(n))continue;const e=t[n],r=e.ena,i=e.fc,c=this._lastSentEffectSyncData[n];if(!c||c.ena!==r)return!0;for(const s in i){if(!i.hasOwnProperty(s))continue;const o=i[s];if(c.fc[s]!==o)return!0}}return!1}doStepPostEvents(){if(!a.multiplayer.isLobbyGameRunning())return;if(this.actionOnPlayerDisconnect!=="DoNothing"&&this.playerNumber!==0&&!a.multiplayerMessageManager.isPlayerConnected(this.playerNumber)){m.info(`Player number ${this.playerNumber} does not exist in the lobby at the moment. Destroying the object.`),this.owner.deleteFromScene(this.owner.getInstanceContainer());return}if(!this._isOwnerAsPlayerOrHost()||this._hasObjectBeenSyncedWithinMaxRate())return;const t=this._getOrCreateInstanceNetworkId(),n=this.owner.getName(),e=this.owner.getNetworkSyncData(),r=this._isBasicObjectNetworkSyncDataDifferentFromLastSync({x:e.x,y:e.y,z:e.z,zo:e.zo,a:e.a,hid:e.hid,lay:e.lay,if:e.if,pfx:e.pfx,pfy:e.pfy}),i=!this._hasObjectBasicInfoBeenSyncedRecently()||r||this._numberOfForcedBasicObjectUpdates>0;if(r&&(this._numberOfForcedBasicObjectUpdates=3),!i)return;const c=e.var&&this._areVariablesDifferentFromLastSync(e.var),s=!this._haveVariablesBeenSyncedRecently()||c||this._numberOfForcedVariablesUpdates>0;c&&(this._numberOfForcedVariablesUpdates=3),s||delete e.var;const o=e.eff&&this._areEffectsDifferentFromLastSync(e.eff),l=!this._haveEffectsBeenSyncedRecently()||o||this._numberOfForcedEffectsUpdates>0;o&&(this._numberOfForcedEffectsUpdates=3),l||delete e.eff;const y=this.owner.getRuntimeScene().networkId;if(!y)return;const{messageName:h,messageData:b}=a.multiplayerMessageManager.createUpdateInstanceMessage({objectOwner:this.playerNumber,objectName:n,instanceNetworkId:t,objectNetworkSyncData:e,sceneNetworkId:y});this._sendDataToPeersWithIncreasedClock(h,b);const u=f();this._lastObjectSyncTimestamp=u,i&&(this._lastBasicObjectSyncTimestamp=u,this._lastSentBasicObjectSyncData={x:e.x,y:e.y,zo:e.zo,a:e.a,hid:e.hid,lay:e.lay,if:e.if,pfx:e.pfx,pfy:e.pfy},this._numberOfForcedBasicObjectUpdates=Math.max(this._numberOfForcedBasicObjectUpdates-1,0)),s&&(this._lastVariablesSyncTimestamp=u,this._lastSentVariableSyncData=e.var,this._numberOfForcedVariablesUpdates=Math.max(this._numberOfForcedVariablesUpdates-1,0)),l&&(this._lastEffectsSyncTimestamp=u,this._lastSentEffectSyncData=e.eff,this._numberOfForcedEffectsUpdates=Math.max(this._numberOfForcedEffectsUpdates-1,0))}onDestroy(){if(this._destroyInstanceTimeoutId&&(clearTimeout(this._destroyInstanceTimeoutId),this._destroyInstanceTimeoutId=null),!a.multiplayer.isLobbyGameRunning()||!this._isOwnerAsPlayerOrHost()&&!a.multiplayer.isCurrentPlayerHost())return;const t=this.owner.networkId,n=this.owner.getName();if(!t){m.info(`Destroying object ${n} without networkId, no need to send a message.`);return}const e=this.owner.getRuntimeScene().networkId;if(!e)return;const{messageName:r,messageData:i}=a.multiplayerMessageManager.createUpdateInstanceMessage({objectOwner:this.playerNumber,objectName:n,instanceNetworkId:t,objectNetworkSyncData:this.owner.getNetworkSyncData(),sceneNetworkId:e});this._sendDataToPeersWithIncreasedClock(r,i);const c=a.multiplayerPeerJsHelper.getAllPeers(),{messageName:s,messageData:o}=a.multiplayerMessageManager.createDestroyInstanceMessage({objectOwner:this.playerNumber,objectName:n,instanceNetworkId:t,sceneNetworkId:e}),l=a.multiplayerMessageManager.createInstanceDestroyedMessageNameFromDestroyInstanceMessage(s);a.multiplayerMessageManager.addExpectedMessageAcknowledgement({originalMessageName:s,originalData:{...o,_clock:this._clock+1},expectedMessageName:l,otherPeerIds:c,shouldCancelMessageIfTimesOut:!1}),this._sendDataToPeersWithIncreasedClock(s,o)}setPlayerObjectOwnership(t){if(m.info(`Setting ownership of object ${this.owner.getName()} (networkId: ${this.owner.networkId} to player ${t}.`),t<0){d.error("Invalid player number ("+t+") when setting ownership of an object.");return}const n=this.playerNumber;this.playerNumber=t;const e=a.multiplayer.getCurrentPlayerNumber();if(!a.multiplayer.isLobbyGameRunning())return;let r=this.owner.networkId;if(!r){if(m.info("Object has no networkId, we change the ownership locally, but it will not be synchronized yet if we are not the owner."),t!==e)return;m.info("We are the new owner, creating a networkId for the object."),r=this._getOrCreateInstanceNetworkId()}const i=this.owner.getRuntimeScene().networkId;if(!i)return;const c=this.owner.getName(),{messageName:s,messageData:o}=a.multiplayerMessageManager.createChangeInstanceOwnerMessage({objectOwner:n,objectName:c,instanceNetworkId:r,newObjectOwner:t,instanceX:this.owner.getX(),instanceY:this.owner.getY(),sceneNetworkId:i});if(t===e){const l=a.multiplayerPeerJsHelper.getAllPeers(),y=a.multiplayerMessageManager.createInstanceOwnerChangedMessageNameFromChangeInstanceOwnerMessage(s);a.multiplayerMessageManager.addExpectedMessageAcknowledgement({originalMessageName:s,originalData:{...o,_clock:this._clock+1},expectedMessageName:y,otherPeerIds:l,shouldCancelMessageIfTimesOut:!a.multiplayer.isCurrentPlayerHost()})}if(m.info("Sending change owner message",s),this._sendDataToPeersWithIncreasedClock(s,o),t===e){m.info("Sending update message to move the object immediately.");const l=this.owner.getNetworkSyncData(),{messageName:y,messageData:h}=a.multiplayerMessageManager.createUpdateInstanceMessage({objectOwner:this.playerNumber,objectName:c,instanceNetworkId:r,objectNetworkSyncData:l,sceneNetworkId:i});this._sendDataToPeersWithIncreasedClock(y,h)}}getPlayerObjectOwnership(){return this.playerNumber}isObjectOwnedByCurrentPlayer(){return this._isOwnerAsPlayerOrHost()}removeObjectOwnership(){this.setPlayerObjectOwnership(0)}takeObjectOwnership(){this.setPlayerObjectOwnership(a.multiplayer.getCurrentPlayerNumber())}getActionOnPlayerDisconnect(){return this.actionOnPlayerDisconnect}enableBehaviorSynchronization(t,n){const e=this.owner.getBehavior(t);if(!e){d.error(`Behavior ${t} does not exist on object ${this.owner.getName()}.`);return}e.enableSynchronization(n)}}a.MultiplayerObjectRuntimeBehavior=g,a.registerBehavior("Multiplayer::MultiplayerObjectBehavior",a.MultiplayerObjectRuntimeBehavior)})(gdjs||(gdjs={}));
//# sourceMappingURL=multiplayerobjectruntimebehavior.js.map
